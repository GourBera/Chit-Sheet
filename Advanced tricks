https://www.journaldev.com/19103/python-collections
https://www.programiz.com/python-programming/online-compiler/


dct_list = ['abc', 'cab', 'abcd', 'dcba', 'abcde']

dct = dict()

for i in dct_list:
    dct_len = len(i)
    if dct_len not in dct:
        dct[dct_len] = []
    dct[dct_len].append(i)

or

for i in dct_list:
    dct_len = len(i)
    dct.setdefault(dct_len, []).append(i)
    
print(dct)      # {3: ['abc', 'cab'], 4: ['abcd', 'dcba'], 5: ['abcde']}

#-------------------

list = [[1,2,3], [4,5,6], [7,8,9]]
Output = [[1,4,7], [2,5,8], [3,6,9]]

Print (list(zip(*list)))

from operator import itemgetter

lst = [[1,2,3], [4,5,6]]

def Extract(lst, row):
    return list(map(itemgetter(row), lst))

output = list()

for i in range(len(lst[0])):
    output.append(Extract(lst, i))
        
print(output)
# [[1, 4], [2, 5], [3, 6]]

        
        

itemgetter(1, 3, 5)('ABCDEFG')
('B', 'D', 'F')


#-------------------
import ast
print(ast.literal_eval('[1,2,3]'))


#-------------------
list of list remove duplicate [[1,2],[1,2][3,4]] = [[1,2], [3,4]]


import itertools

lst = [[1,2],[1,2], [3,4]]
lst.sort()
print(list(k for k,_ in itertools.groupby(lst)))


#-------------------
frozenset() # immutable
translate
swapcase
maketrans
center
count
casefold
discard
clear
pop
popitem
setdefault
class method vs static method

#-------------------

dct = dict(a='20000', d='10', b='300', c='5000')
print(dict(sorted(dct.items(), key=lambda item: item[0])))  # Key
print(dict(sorted(dct.items(), key=lambda item: item[1])))  # Value {'d': '10', 'b': '300', 'c': '5000', 'a': '20000'}
print(dict(sorted(dct.items(), key=lambda item: item[1], reverse=True)))  # reverse order

import operator
print(sorted(dct.items(), key=operator.itemgetter(1)))

print(dict(sorted(dct.items(), key=lambda item: len(item[1])))) # Value Len

#-------------------

print(sorted(dct_list, key=len))    # Sort list by len
print(sorted(dct_list, reverse=True))    # Sort list in reverse order

#-------------------
import re

l1 = ['python', 'py4you', 'coding', 'pyth0n', 'Hello3', 'hello1']
print(sorted(l1, key=lambda x: any(s.isdigit() for s in x)))


def get_digit(s):
    m = re.search(r"\d+", s)
    return int(m.group() if m else -1)


print(sorted(l1, key=get_digit))  # ['python', 'coding', 'pyth0n', 'hello1', 'Hello3', 'py4you']


#-------------------
a = [1, 2, 3]
b = [1, 2, 3, 4]
c = [1, 2, 3, 4, 5]

lookup_dict = dict(list1=[a, len(a), 'a'],
                   list2=[b, len(b), 'b'],
                   list3=[c, len(c), 'c'])

print(lookup_dict.get('list1')[0])

#-------------------

d1 = dict(a=1,c=2)
d2 = dict(c=3,d=4)
d3 = dict(e=5,f=6)

merge = {**d1, **d2, **d3}
print(merge)

#-------------------
x, *y = 1,2,3,4,5,7,8

print(x, y) # 1 [2, 3, 4, 5, 7, 8]


#-------------------
Bagging -> Simple average | week learner | bootstrap resamplening
Boosting -> Weighted average | penalized


#-------------------
BAONXXOLL
BALLON -> 1

from collections import Counter

s = 'BAONXXOLL'
word = ['B','A','L','L','O','N']

counts = Counter(s)

word_counts = []

for w in word:
    word_counts.append(counts.get(w, 0))

print(min(word_counts))


#-------------------
from itertools import groupby
print(*[(len(list(c)), int(k)) for k, c in groupby('899955521000')]) #(1, 8) (3, 9) (3, 5) (1, 2) (1, 1) (3, 0)

for i,j in groupby('899955521000'):
    print((len(list(j)), int(i)), end='')
    
[print(k, *list(c)) for k, c in groupby('899955521000')]
    
#-------------------
b=20

def fuct(a=None):
    global b
    if a:
        print('a = {}'.format(a))
    else:
        print('b = {}'.format(b))


fuct()


#-------------------
import sys

for i in sys.argv:
    print(sys.argv[2])

#-------------------

t = ['Beta', 'beta', 'alpha', 'Alpha']
print(sorted(t, key=str.lower, reverse=True)) 
# ['Beta', 'beta', 'alpha', 'Alpha']


#-------------------
# The string val has at least 3 distinct characters.
from collections import Counter, OrderedDict

val = 'aabbbcccd'
class OrderedCounter(Counter, OrderedDict):
    pass
[print(*c) for c in OrderedCounter(sorted(val)).most_common(3)]



#-------------------
#--------------fibonacci
cube = lambda x: x**3

def fibonacci(n):
    a,b = 0,1
    for i in range(n):
        yield a
        a,b = b,a+b

if __name__ == '__main__':
    n = int(input())
    print(list(map(cube, fibonacci(n))))


#-------------------
d = [2,5,8,0]
[print(x, end=' ') for x in d]



#-------------------
# The string val has at least 3 distinct characters.
from collections import Counter, OrderedDict

val = 'aabbbcccd'
class OrderedCounter(Counter, OrderedDict):
    pass
[print(*c) for c in OrderedCounter(sorted(val)).most_common(3)]


#-------------------
strr = '100,000,000.000'

import re
print(*re.split(r'[.,]+', strr.strip('., ')), sep='\n')


#-------------------
s, k = 'aaadaaddd', 'aa'
matches = list(re.finditer(r'(?={})'.format(k), s))
if matches:
    print('\n'.join(str((match.start(),
          match.start() + len(k) - 1)) for match in matches))
else:
    print('(-1, -1)')
    
    
#-------------------
directory = "D:\\SaS\\data_source\\"

df_info = dict()

for root,dirs,files in os.walk(directory):
    for file in files:
        if file.endswith(".csv"):
            df_name = f"df_{file.split('.')[0]}".lower()
            df_path = os.path.join(directory, file)
            df = pd.read_csv(df_path)
            df[df_name] = 'yes'
            df_info[df_name] = df            
                        
df_list = list(df_info)

#-------------------
os.path.splitext(file_path)


#-------------------
async def f(x, y):
    pass
    
def g(x, y):
    pass
    
inspect.signature(f) == inspect.signatute(g)    # True

#-------------------
Get Every n-th item from the list

lst = [1,2,3,4,5,6,7,8,9]

n = 3
lst[n-1::n] # [4,8]

n = 2
lst[n-1::n] # [3,6,9]


#-------------------
df.pivot(index='col1', columns='col2')


#-------------------



#-------------------
